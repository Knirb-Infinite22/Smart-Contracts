{
  "address": "0x712Fb402F400Ee8CeE0A8733F50fC986E9575326",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICallExecutor",
          "name": "callExecutor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BitUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughReceived",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InvalidData",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "_getChainlinkPriceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPriceOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "testPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bitmapIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bit",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "tokenToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff027f6ceda87923d5e1d31acdad2fdbee9808361b4be4c0e4e441d176ce48b0",
  "receipt": {
    "to": null,
    "from": "0x7A3876E516d7F221Eb4791410F7434F20f01773A",
    "contractAddress": "0x712Fb402F400Ee8CeE0A8733F50fC986E9575326",
    "transactionIndex": 103,
    "gasUsed": "757063",
    "logsBloom": "0x
    "blockHash": "0x26f3e383d208ba9156cea6fff9ab47e5aeda339548d5bcc56404d0b278e01d84",
    "transactionHash": "0xff027f6ceda87923d5e1d31acdad2fdbee9808361b4be4c0e4e441d176ce48b0",
    "logs": [],
    "blockNumber": 7738619,
    "cumulativeGasUsed": "26090795",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDE61dfE5fbF3F4Df70B16D0618f69B96A2754bf8"
  ],
  "numDeployments": 5,
  "solcInputHash": "736c7f2aca8af9fc91e67b226eb39b74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICallExecutor\",\"name\":\"callExecutor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BitUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"NotEnoughReceived\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"_getChainlinkPriceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPriceOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"testPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmapIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bit\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"BitUsed()\":[{\"details\":\"Revert when bit provided is used\"}],\"Expired()\":[{\"details\":\"Revert when limit swap is expired\"}],\"InvalidBit()\":[{\"details\":\"Revert when bit provided is not valid\"}],\"NotEnoughReceived(uint256)\":[{\"details\":\"Revert when swap has not received enough of the output asset to be fulfilled\"}]},\"kind\":\"dev\",\"methods\":{\"tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"Executes an ERC20 to ERC20 limit swap\",\"params\":{\"bit\":\"The value of the replay bit [signed]\",\"bitmapIndex\":\"The index of the replay bit's bytes32 slot [signed]\",\"data\":\"Data to execute on the `to` contract to fulfill the swap [unsigned]\",\"expiryBlock\":\"The block when the swap expires [signed]\",\"to\":\"Address of the contract that will fulfill the swap [unsigned]\",\"tokenIn\":\"The input token provided for the swap [signed]\",\"tokenInAmount\":\"Amount of tokenIn provided [signed]\",\"tokenOut\":\"The output token required to be received from the swap [signed]\",\"tokenOutAmount\":\"Amount of tokenOut required to be received [signed]\"}}},\"title\":\"Verifier for ERC20 limit swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)\":{\"notice\":\"This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params\"}},\"notice\":\"These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"StopLimitSwapVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Interfaces/ICallExecutor.sol\":{\"content\":\"\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface ICallExecutor {\\n  function proxyCall(address to, bytes memory data) external payable;\\n}\",\"keccak256\":\"0x5bb6a30e5b8fd252e45fcb09990d68d93520e3c739e8b1cb11ac7390a0deb938\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Libraries/Bit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\npragma abicoder v1;\\n\\n/// @title Bit replay protection library\\n/// @notice Handles storage and loads for replay protection bits\\n/// @dev Solution adapted from https://github.com/PISAresearch/metamask-comp/blob/77fa8295c168ee0b6bf801cbedab797d6f8cfd5d/src/contracts/BitFlipMetaTransaction/README.md\\n/// @dev This is a gas optimized technique that stores up to 256 replay protection bits per bytes32 slot\\nlibrary Bit {\\n  /// @dev Revert when bit provided is not valid\\n  error InvalidBit();\\n\\n  /// @dev Revert when bit provided is used\\n  error BitUsed();\\n\\n  /// @dev Initial pointer for bitmap storage ptr computation\\n  /// @notice This is the uint256 representation of keccak(\\\"bmp\\\")\\n  uint256 constant INITIAL_BMP_PTR = \\n  48874093989078844336340380824760280705349075126087700760297816282162649029611;\\n\\n  /// @dev Adds a bit to the uint256 bitmap at bitmapIndex\\n  /// @dev Value of bit cannot be zero and must represent a single bit\\n  /// @param bitmapIndex The index of the uint256 bitmap\\n  /// @param bit The value of the bit within the uint256 bitmap\\n  function useBit(uint256 bitmapIndex, uint256 bit) internal {\\n    if (!validBit(bit)) {\\n      revert InvalidBit();\\n    }\\n    bytes32 ptr = bitmapPtr(bitmapIndex);\\n    uint256 bitmap = loadUint(ptr);\\n    if (bitmap & bit != 0) {\\n      revert BitUsed();\\n    }\\n    uint256 updatedBitmap = bitmap | bit;\\n    assembly { sstore(ptr, updatedBitmap) }\\n  }\\n\\n  /// @dev Check that a bit is valid\\n  /// @param bit The bit to check\\n  /// @return isValid True if bit is greater than zero and represents a single bit\\n  function validBit(uint256 bit) internal pure returns (bool isValid) {\\n    assembly {\\n      // equivalent to: isValid = (bit > 0 && bit & bit-1) == 0;\\n      isValid := and(\\n        iszero(iszero(bit)), \\n        iszero(and(bit, sub(bit, 1)))\\n      )\\n    } \\n  }\\n\\n  /// @dev Get a bitmap storage pointer\\n  /// @return The bytes32 pointer to the storage location of the uint256 bitmap at bitmapIndex\\n  function bitmapPtr (uint256 bitmapIndex) internal pure returns (bytes32) {\\n    return bytes32(INITIAL_BMP_PTR + bitmapIndex);\\n  }\\n\\n  /// @dev Returns the uint256 value at storage location ptr\\n  /// @param ptr The storage location pointer\\n  /// @return val The uint256 value at storage location ptr\\n  function loadUint(bytes32 ptr) internal view returns (uint256 val) {\\n    assembly { val := sload(ptr) }\\n  }\\n}\\n\",\"keccak256\":\"0xbe67e84b69bb4a006de164048c60656592598b14e22883ce395b4f75f557aa1e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract Oracle {\\n  uint constant public ONE_HUNDRED_PERCENT = 100;\\n\\n  mapping(address => uint) public testPrices;\\n\\n  function setPriceOf(address _token, uint _price) external {\\n    testPrices[_token] = _price;\\n  }\\n\\n  function _isPriceValid(IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount) internal returns(bool){\\n    uint totalInUSD;\\n    totalInUSD += (tokenInAmount * _getChainlinkPriceOf(tokenIn));\\n\\n    uint usdReqOut = _getChainlinkPriceOf(tokenOut) * tokenOutAmount;\\n\\n    return(totalInUSD <= usdReqOut);\\n  }\\n\\n  function _getChainlinkPriceOf(IERC20 _token) public view returns(uint){\\n    return testPrices[address(_token)];\\n  }\\n\\n}\",\"keccak256\":\"0xc90471e5e05cdc2f8235bf207aeac820df7ea15a942fcc89c39b115b6e6ac153\",\"license\":\"MIT\"},\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./Interfaces/ICallExecutor.sol\\\";\\nimport \\\"./Libraries/Bit.sol\\\";\\nimport {Oracle} from \\\"./Oracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Verifier for ERC20 limit swaps\\n/// @notice These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts\\ncontract StopLimitSwapVerifier is Oracle{\\n  /// @dev Revert when limit swap is expired\\n  error Expired();\\n\\n  /// @dev Revert when swap has not received enough of the output asset to be fulfilled\\n  error NotEnoughReceived(uint256 amountReceived);\\n\\n  event InvalidData();\\n\\n  ICallExecutor internal immutable CALL_EXECUTOR;\\n\\n  constructor(ICallExecutor callExecutor) {\\n    CALL_EXECUTOR = callExecutor;\\n  }\\n\\n  /// @dev Executes an ERC20 to ERC20 limit swap\\n  /// @notice This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params\\n  /// @param bitmapIndex The index of the replay bit's bytes32 slot [signed]\\n  /// @param bit The value of the replay bit [signed]\\n  /// @param tokenIn The input token provided for the swap [signed]\\n  /// @param tokenOut The output token required to be received from the swap [signed]\\n  /// @param tokenInAmount Amount of tokenIn provided [signed]\\n  /// @param tokenOutAmount Amount of tokenOut required to be received [signed]\\n  /// @param expiryBlock The block when the swap expires [signed]\\n  /// @param to Address of the contract that will fulfill the swap [unsigned]\\n  /// @param data Data to execute on the `to` contract to fulfill the swap [unsigned]\\n  function tokenToToken(\\n    uint256 bitmapIndex, uint256 bit, IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount,\\n    uint256 expiryBlock, address recipient, address to, bytes calldata data\\n  )\\n    external\\n  {\\n    // Oracle Check\\n    require(_isPriceValid(tokenIn, tokenOut, tokenInAmount, tokenOutAmount), \\\"Price too high\\\");\\n\\n    if (expiryBlock <= block.number) {\\n      revert Expired();\\n    }\\n  \\n    Bit.useBit(bitmapIndex, bit);\\n\\n    address owner = proxyOwner();\\n\\n    uint256 tokenOutBalance = tokenOut.balanceOf(owner);\\n\\n    tokenIn.transferFrom(owner, recipient, tokenInAmount);\\n\\n    CALL_EXECUTOR.proxyCall(to, data);\\n\\n    uint256 tokenOutAmountReceived = tokenOut.balanceOf(owner) - tokenOutBalance;\\n\\n    // todo find out what this is all about\\n    if (tokenOutAmountReceived < tokenOutAmount) {\\n      revert NotEnoughReceived(tokenOutAmountReceived);\\n    }\\n  }\\n\\n  /// @dev Returns the owner address for the proxy\\n  /// @return _proxyOwner The owner address for the proxy\\n  function proxyOwner() internal view returns (address _proxyOwner) {\\n    assembly {\\n      // copies to \\\"scratch space\\\" 0 memory pointer\\n      extcodecopy(address(), 0, 0x28, 0x14)\\n      _proxyOwner := shr(0x60, mload(0))\\n    }\\n  }\\n\\n    fallback() external{\\n    emit InvalidData();\\n  }\\n\\n\\n}\",\"keccak256\":\"0xa6eefc3e3a732950da9e8f5c38339516a904a255334d542368fdf7346ac46aed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ddc380380610ddc833981810160405281019061003291906100e1565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b60006100ae82610091565b9050919050565b6100be816100a3565b81146100c957600080fd5b50565b6000815190506100db816100b5565b92915050565b6000602082840312156100f7576100f661006c565b5b6000610105848285016100cc565b91505092915050565b608051610cb361012960003960006103220152610cb36000f3fe608060405234801561001057600080fd5b506004361061005b5760003560e01c80630f6322c41461008a5780631536cc73146100a65780634a78ca17146100c2578063dd0081c7146100f2578063ec062b75146101105761005c565b5b7f5cb045dbe1e6a83a0b3b08b74d52e9d7458a678ccdbe4247774b0abb20db402f60405160405180910390a1005b6100a4600480360381019061009f91906106ee565b610140565b005b6100c060048036038101906100bb91906107d1565b610187565b005b6100dc60048036038101906100d791906108d1565b61048d565b6040516100e9919061090d565b60405180910390f35b6100fa6104d5565b604051610107919061090d565b60405180910390f35b61012a60048036038101906101259190610928565b6104da565b604051610137919061090d565b60405180910390f35b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610193898989896104f2565b6101d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c9906109b2565b60405180910390fd5b43851161020b576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102158b8b61053e565b600061021f6105e4565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161025c91906109e1565b602060405180830381865afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610a11565b90508a73ffffffffffffffffffffffffffffffffffffffff166323b872dd83888c6040518463ffffffff1660e01b81526004016102dc93929190610a3e565b6020604051808303816000875af11580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f9190610aad565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a31f6b48686866040518463ffffffff1660e01b815260040161037d93929190610b38565b600060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050506000818b73ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016103eb91906109e1565b602060405180830381865afa158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c9190610a11565b6104369190610b99565b90508881101561047d57806040517f8e3b9edc000000000000000000000000000000000000000000000000000000008152600401610474919061090d565b60405180910390fd5b5050505050505050505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606481565b60006020528060005260406000206000915090505481565b6000806104fe8661048d565b846105099190610bcd565b816105149190610c27565b90506000836105228761048d565b61052c9190610bcd565b90508082111592505050949350505050565b610547816105f9565b61057d576040517f8e8721ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105888361060d565b9050600061059582610645565b90506000838216146105d3576040517f8c2e095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083821790508083555050505050565b6000601460286000303c60005160601c905090565b600060018203821615821515169050919050565b6000817f6c0dc1c455ee100500be45eb5af9d4c93f609d5877e81b7c1f2a01280732dbeb61063b9190610c27565b60001b9050919050565b600081549050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106858261065a565b9050919050565b6106958161067a565b81146106a057600080fd5b50565b6000813590506106b28161068c565b92915050565b6000819050919050565b6106cb816106b8565b81146106d657600080fd5b50565b6000813590506106e8816106c2565b92915050565b6000806040838503121561070557610704610650565b5b6000610713858286016106a3565b9250506020610724858286016106d9565b9150509250929050565b60006107398261067a565b9050919050565b6107498161072e565b811461075457600080fd5b50565b60008135905061076681610740565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107915761079061076c565b5b8235905067ffffffffffffffff8111156107ae576107ad610771565b5b6020830191508360018202830111156107ca576107c9610776565b5b9250929050565b60008060008060008060008060008060006101408c8e0312156107f7576107f6610650565b5b60006108058e828f016106d9565b9b505060206108168e828f016106d9565b9a505060406108278e828f01610757565b99505060606108388e828f01610757565b98505060806108498e828f016106d9565b97505060a061085a8e828f016106d9565b96505060c061086b8e828f016106d9565b95505060e061087c8e828f016106a3565b94505061010061088e8e828f016106a3565b9350506101208c013567ffffffffffffffff8111156108b0576108af610655565b5b6108bc8e828f0161077b565b92509250509295989b509295989b9093969950565b6000602082840312156108e7576108e6610650565b5b60006108f584828501610757565b91505092915050565b610907816106b8565b82525050565b600060208201905061092260008301846108fe565b92915050565b60006020828403121561093e5761093d610650565b5b600061094c848285016106a3565b91505092915050565b600082825260208201905092915050565b7f507269636520746f6f2068696768000000000000000000000000000000000000600082015250565b600061099c600e83610955565b91506109a782610966565b602082019050919050565b600060208201905081810360008301526109cb8161098f565b9050919050565b6109db8161067a565b82525050565b60006020820190506109f660008301846109d2565b92915050565b600081519050610a0b816106c2565b92915050565b600060208284031215610a2757610a26610650565b5b6000610a35848285016109fc565b91505092915050565b6000606082019050610a5360008301866109d2565b610a6060208301856109d2565b610a6d60408301846108fe565b949350505050565b60008115159050919050565b610a8a81610a75565b8114610a9557600080fd5b50565b600081519050610aa781610a81565b92915050565b600060208284031215610ac357610ac2610650565b5b6000610ad184828501610a98565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610b178385610ada565b9350610b24838584610aeb565b610b2d83610afa565b840190509392505050565b6000604082019050610b4d60008301866109d2565b8181036020830152610b60818486610b0b565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ba4826106b8565b9150610baf836106b8565b925082821015610bc257610bc1610b6a565b5b828203905092915050565b6000610bd8826106b8565b9150610be3836106b8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c1c57610c1b610b6a565b5b828202905092915050565b6000610c32826106b8565b9150610c3d836106b8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c7257610c71610b6a565b5b82820190509291505056fea2646970667358221220335077816ed6e025f243912706bfb84dc3d20f329facbacfe986b8d6ed14262864736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061005b5760003560e01c80630f6322c41461008a5780631536cc73146100a65780634a78ca17146100c2578063dd0081c7146100f2578063ec062b75146101105761005c565b5b7f5cb045dbe1e6a83a0b3b08b74d52e9d7458a678ccdbe4247774b0abb20db402f60405160405180910390a1005b6100a4600480360381019061009f91906106ee565b610140565b005b6100c060048036038101906100bb91906107d1565b610187565b005b6100dc60048036038101906100d791906108d1565b61048d565b6040516100e9919061090d565b60405180910390f35b6100fa6104d5565b604051610107919061090d565b60405180910390f35b61012a60048036038101906101259190610928565b6104da565b604051610137919061090d565b60405180910390f35b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610193898989896104f2565b6101d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c9906109b2565b60405180910390fd5b43851161020b576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102158b8b61053e565b600061021f6105e4565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161025c91906109e1565b602060405180830381865afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610a11565b90508a73ffffffffffffffffffffffffffffffffffffffff166323b872dd83888c6040518463ffffffff1660e01b81526004016102dc93929190610a3e565b6020604051808303816000875af11580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f9190610aad565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a31f6b48686866040518463ffffffff1660e01b815260040161037d93929190610b38565b600060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050506000818b73ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016103eb91906109e1565b602060405180830381865afa158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c9190610a11565b6104369190610b99565b90508881101561047d57806040517f8e3b9edc000000000000000000000000000000000000000000000000000000008152600401610474919061090d565b60405180910390fd5b5050505050505050505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606481565b60006020528060005260406000206000915090505481565b6000806104fe8661048d565b846105099190610bcd565b816105149190610c27565b90506000836105228761048d565b61052c9190610bcd565b90508082111592505050949350505050565b610547816105f9565b61057d576040517f8e8721ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105888361060d565b9050600061059582610645565b90506000838216146105d3576040517f8c2e095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083821790508083555050505050565b6000601460286000303c60005160601c905090565b600060018203821615821515169050919050565b6000817f6c0dc1c455ee100500be45eb5af9d4c93f609d5877e81b7c1f2a01280732dbeb61063b9190610c27565b60001b9050919050565b600081549050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106858261065a565b9050919050565b6106958161067a565b81146106a057600080fd5b50565b6000813590506106b28161068c565b92915050565b6000819050919050565b6106cb816106b8565b81146106d657600080fd5b50565b6000813590506106e8816106c2565b92915050565b6000806040838503121561070557610704610650565b5b6000610713858286016106a3565b9250506020610724858286016106d9565b9150509250929050565b60006107398261067a565b9050919050565b6107498161072e565b811461075457600080fd5b50565b60008135905061076681610740565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107915761079061076c565b5b8235905067ffffffffffffffff8111156107ae576107ad610771565b5b6020830191508360018202830111156107ca576107c9610776565b5b9250929050565b60008060008060008060008060008060006101408c8e0312156107f7576107f6610650565b5b60006108058e828f016106d9565b9b505060206108168e828f016106d9565b9a505060406108278e828f01610757565b99505060606108388e828f01610757565b98505060806108498e828f016106d9565b97505060a061085a8e828f016106d9565b96505060c061086b8e828f016106d9565b95505060e061087c8e828f016106a3565b94505061010061088e8e828f016106a3565b9350506101208c013567ffffffffffffffff8111156108b0576108af610655565b5b6108bc8e828f0161077b565b92509250509295989b509295989b9093969950565b6000602082840312156108e7576108e6610650565b5b60006108f584828501610757565b91505092915050565b610907816106b8565b82525050565b600060208201905061092260008301846108fe565b92915050565b60006020828403121561093e5761093d610650565b5b600061094c848285016106a3565b91505092915050565b600082825260208201905092915050565b7f507269636520746f6f2068696768000000000000000000000000000000000000600082015250565b600061099c600e83610955565b91506109a782610966565b602082019050919050565b600060208201905081810360008301526109cb8161098f565b9050919050565b6109db8161067a565b82525050565b60006020820190506109f660008301846109d2565b92915050565b600081519050610a0b816106c2565b92915050565b600060208284031215610a2757610a26610650565b5b6000610a35848285016109fc565b91505092915050565b6000606082019050610a5360008301866109d2565b610a6060208301856109d2565b610a6d60408301846108fe565b949350505050565b60008115159050919050565b610a8a81610a75565b8114610a9557600080fd5b50565b600081519050610aa781610a81565b92915050565b600060208284031215610ac357610ac2610650565b5b6000610ad184828501610a98565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610b178385610ada565b9350610b24838584610aeb565b610b2d83610afa565b840190509392505050565b6000604082019050610b4d60008301866109d2565b8181036020830152610b60818486610b0b565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ba4826106b8565b9150610baf836106b8565b925082821015610bc257610bc1610b6a565b5b828203905092915050565b6000610bd8826106b8565b9150610be3836106b8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c1c57610c1b610b6a565b5b828202905092915050565b6000610c32826106b8565b9150610c3d836106b8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c7257610c71610b6a565b5b82820190509291505056fea2646970667358221220335077816ed6e025f243912706bfb84dc3d20f329facbacfe986b8d6ed14262864736f6c634300080e0033",
  "devdoc": {
    "errors": {
      "BitUsed()": [
        {
          "details": "Revert when bit provided is used"
        }
      ],
      "Expired()": [
        {
          "details": "Revert when limit swap is expired"
        }
      ],
      "InvalidBit()": [
        {
          "details": "Revert when bit provided is not valid"
        }
      ],
      "NotEnoughReceived(uint256)": [
        {
          "details": "Revert when swap has not received enough of the output asset to be fulfilled"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)": {
        "details": "Executes an ERC20 to ERC20 limit swap",
        "params": {
          "bit": "The value of the replay bit [signed]",
          "bitmapIndex": "The index of the replay bit's bytes32 slot [signed]",
          "data": "Data to execute on the `to` contract to fulfill the swap [unsigned]",
          "expiryBlock": "The block when the swap expires [signed]",
          "to": "Address of the contract that will fulfill the swap [unsigned]",
          "tokenIn": "The input token provided for the swap [signed]",
          "tokenInAmount": "Amount of tokenIn provided [signed]",
          "tokenOut": "The output token required to be received from the swap [signed]",
          "tokenOutAmount": "Amount of tokenOut required to be received [signed]"
        }
      }
    },
    "title": "Verifier for ERC20 limit swaps",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)": {
        "notice": "This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params"
      }
    },
    "notice": "These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 194,
        "contract": "contracts/Verifier.sol:StopLimitSwapVerifier",
        "label": "testPrices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}