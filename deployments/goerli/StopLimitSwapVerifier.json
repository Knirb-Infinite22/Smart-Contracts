{
  "address": "0x40739E742624d8C446d98d47C5b4Eb3dD276c344",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICallExecutor",
          "name": "callExecutor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BitUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughReceived",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InvalidData",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bitmapIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bit",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "tokenToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9d8c2b26ccbb8726e20606ab4f44dd7dd8fd36d7f6224541c7c053f0f3e440e",
  "receipt": {
    "to": null,
    "from": "0x7A3876E516d7F221Eb4791410F7434F20f01773A",
    "contractAddress": "0x40739E742624d8C446d98d47C5b4Eb3dD276c344",
    "transactionIndex": 74,
    "gasUsed": "672950",
    "logsBloom": "0x
    "blockHash": "0x4e3481509c0395283f2284a4de50e3a9147a1906fdfa284d3a1722b28a2e1914",
    "transactionHash": "0xe9d8c2b26ccbb8726e20606ab4f44dd7dd8fd36d7f6224541c7c053f0f3e440e",
    "logs": [],
    "blockNumber": 7739907,
    "cumulativeGasUsed": "18990678",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDE61dfE5fbF3F4Df70B16D0618f69B96A2754bf8"
  ],
  "numDeployments": 9,
  "solcInputHash": "629f5345afb3fa977e6500c96468d017",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICallExecutor\",\"name\":\"callExecutor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BitUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"NotEnoughReceived\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmapIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bit\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"BitUsed()\":[{\"details\":\"Revert when bit provided is used\"}],\"Expired()\":[{\"details\":\"Revert when limit swap is expired\"}],\"InvalidBit()\":[{\"details\":\"Revert when bit provided is not valid\"}],\"NotEnoughReceived(uint256)\":[{\"details\":\"Revert when swap has not received enough of the output asset to be fulfilled\"}]},\"kind\":\"dev\",\"methods\":{\"tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"Executes an ERC20 to ERC20 limit swap\",\"params\":{\"bit\":\"The value of the replay bit [signed]\",\"bitmapIndex\":\"The index of the replay bit's bytes32 slot [signed]\",\"data\":\"Data to execute on the `to` contract to fulfill the swap [unsigned]\",\"expiryBlock\":\"The block when the swap expires [signed]\",\"to\":\"Address of the contract that will fulfill the swap [unsigned]\",\"tokenIn\":\"The input token provided for the swap [signed]\",\"tokenInAmount\":\"Amount of tokenIn provided [signed]\",\"tokenOut\":\"The output token required to be received from the swap [signed]\",\"tokenOutAmount\":\"Amount of tokenOut required to be received [signed]\"}}},\"title\":\"Verifier for ERC20 limit swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)\":{\"notice\":\"This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params\"}},\"notice\":\"These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"StopLimitSwapVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Interfaces/ICallExecutor.sol\":{\"content\":\"\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface ICallExecutor {\\n  function proxyCall(address to, bytes memory data) external payable;\\n}\",\"keccak256\":\"0x5bb6a30e5b8fd252e45fcb09990d68d93520e3c739e8b1cb11ac7390a0deb938\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Libraries/Bit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\npragma abicoder v1;\\n\\n/// @title Bit replay protection library\\n/// @notice Handles storage and loads for replay protection bits\\n/// @dev Solution adapted from https://github.com/PISAresearch/metamask-comp/blob/77fa8295c168ee0b6bf801cbedab797d6f8cfd5d/src/contracts/BitFlipMetaTransaction/README.md\\n/// @dev This is a gas optimized technique that stores up to 256 replay protection bits per bytes32 slot\\nlibrary Bit {\\n  /// @dev Revert when bit provided is not valid\\n  error InvalidBit();\\n\\n  /// @dev Revert when bit provided is used\\n  error BitUsed();\\n\\n  /// @dev Initial pointer for bitmap storage ptr computation\\n  /// @notice This is the uint256 representation of keccak(\\\"bmp\\\")\\n  uint256 constant INITIAL_BMP_PTR = \\n  48874093989078844336340380824760280705349075126087700760297816282162649029611;\\n\\n  /// @dev Adds a bit to the uint256 bitmap at bitmapIndex\\n  /// @dev Value of bit cannot be zero and must represent a single bit\\n  /// @param bitmapIndex The index of the uint256 bitmap\\n  /// @param bit The value of the bit within the uint256 bitmap\\n  function useBit(uint256 bitmapIndex, uint256 bit) internal {\\n    if (!validBit(bit)) {\\n      revert InvalidBit();\\n    }\\n    bytes32 ptr = bitmapPtr(bitmapIndex);\\n    uint256 bitmap = loadUint(ptr);\\n    if (bitmap & bit != 0) {\\n      revert BitUsed();\\n    }\\n    uint256 updatedBitmap = bitmap | bit;\\n    assembly { sstore(ptr, updatedBitmap) }\\n  }\\n\\n  /// @dev Check that a bit is valid\\n  /// @param bit The bit to check\\n  /// @return isValid True if bit is greater than zero and represents a single bit\\n  function validBit(uint256 bit) internal pure returns (bool isValid) {\\n    assembly {\\n      // equivalent to: isValid = (bit > 0 && bit & bit-1) == 0;\\n      isValid := and(\\n        iszero(iszero(bit)), \\n        iszero(and(bit, sub(bit, 1)))\\n      )\\n    } \\n  }\\n\\n  /// @dev Get a bitmap storage pointer\\n  /// @return The bytes32 pointer to the storage location of the uint256 bitmap at bitmapIndex\\n  function bitmapPtr (uint256 bitmapIndex) internal pure returns (bytes32) {\\n    return bytes32(INITIAL_BMP_PTR + bitmapIndex);\\n  }\\n\\n  /// @dev Returns the uint256 value at storage location ptr\\n  /// @param ptr The storage location pointer\\n  /// @return val The uint256 value at storage location ptr\\n  function loadUint(bytes32 ptr) internal view returns (uint256 val) {\\n    assembly { val := sload(ptr) }\\n  }\\n}\\n\",\"keccak256\":\"0xbe67e84b69bb4a006de164048c60656592598b14e22883ce395b4f75f557aa1e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Oracle {\\n  uint constant public ONE_HUNDRED_PERCENT = 100;\\n\\n  mapping(address => uint) public testPrices;\\n\\n  constructor(){\\n    // easy set prices\\n    testPrices[0x6bAd8529bB6530A7EE00BD55A62c507ab2dC6AE8] = 1;\\n    testPrices[0x7F25168fd1668691546Aa994b90A124b94d38998] = 2000;\\n  }\\n\\n  function setPriceOf(address _token, uint _price) external {\\n    testPrices[_token] = _price;\\n  }\\n\\n  function isPriceValid(IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount) external view returns(bool){\\n    uint totalInUSD;\\n    totalInUSD += (tokenInAmount * testPrices[address(tokenIn)]);\\n    \\n    uint usdReqOut = testPrices[address(tokenOut)] * tokenOutAmount;\\n    require(totalInUSD > 0 && usdReqOut > 0, \\\"Cannot have 0\\\");\\n    return(totalInUSD <= usdReqOut);\\n  }\\n\\n}\",\"keccak256\":\"0x6a6bd8f858d5239b12bf47cd372352a7b17700d7cc148d15c3562311407f85d4\",\"license\":\"MIT\"},\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./Interfaces/ICallExecutor.sol\\\";\\nimport \\\"./Libraries/Bit.sol\\\";\\nimport {Oracle} from \\\"./Oracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOracle{\\n  function isPriceValid(IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount) external view returns(bool);\\n}\\n\\n/// @title Verifier for ERC20 limit swaps\\n/// @notice These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts\\ncontract StopLimitSwapVerifier{\\n  /// @dev Revert when limit swap is expired\\n  error Expired();\\n\\n  /// @dev Revert when swap has not received enough of the output asset to be fulfilled\\n  error NotEnoughReceived(uint256 amountReceived);\\n\\n  event InvalidData();\\n\\n  ICallExecutor internal immutable CALL_EXECUTOR;\\n\\n  constructor(ICallExecutor callExecutor) {\\n    CALL_EXECUTOR = callExecutor;\\n  }\\n\\n  /// @dev Executes an ERC20 to ERC20 limit swap\\n  /// @notice This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params\\n  /// @param bitmapIndex The index of the replay bit's bytes32 slot [signed]\\n  /// @param bit The value of the replay bit [signed]\\n  /// @param tokenIn The input token provided for the swap [signed]\\n  /// @param tokenOut The output token required to be received from the swap [signed]\\n  /// @param tokenInAmount Amount of tokenIn provided [signed]\\n  /// @param tokenOutAmount Amount of tokenOut required to be received [signed]\\n  /// @param expiryBlock The block when the swap expires [signed]\\n  /// @param to Address of the contract that will fulfill the swap [unsigned]\\n  /// @param data Data to execute on the `to` contract to fulfill the swap [unsigned]\\n  function tokenToToken(\\n    uint256 bitmapIndex, uint256 bit, IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount,\\n    uint256 expiryBlock, address recipient, address to, bytes calldata data\\n  )\\n    external\\n  {\\n    // Oracle Check\\n    require(IOracle(address(0x378f110af67faD24a7e4311D6B33c81d5810B089)).isPriceValid(tokenIn, tokenOut, tokenInAmount, tokenOutAmount), \\\"Price too high\\\");\\n\\n    if (expiryBlock <= block.number) {\\n      revert Expired();\\n    }\\n  \\n    Bit.useBit(bitmapIndex, bit);\\n\\n    address owner = proxyOwner();\\n\\n    uint256 tokenOutBalance = tokenOut.balanceOf(owner);\\n\\n    tokenIn.transferFrom(owner, recipient, tokenInAmount);\\n\\n    CALL_EXECUTOR.proxyCall(to, data);\\n\\n    uint256 tokenOutAmountReceived = tokenOut.balanceOf(owner) - tokenOutBalance;\\n\\n    // todo find out what this is all about\\n    if (tokenOutAmountReceived < tokenOutAmount) {\\n      revert NotEnoughReceived(tokenOutAmountReceived);\\n    }\\n  }\\n\\n  /// @dev Returns the owner address for the proxy\\n  /// @return _proxyOwner The owner address for the proxy\\n  function proxyOwner() internal view returns (address _proxyOwner) {\\n    assembly {\\n      // copies to \\\"scratch space\\\" 0 memory pointer\\n      extcodecopy(address(), 0, 0x28, 0x14)\\n      _proxyOwner := shr(0x60, mload(0))\\n    }\\n  }\\n\\n    fallback() external{\\n    emit InvalidData();\\n  }\\n\\n\\n}\",\"keccak256\":\"0x7c262bc64cacff699014fc6106f976ba22e0f10be688af7b1e51212fa499fcf4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610c56380380610c56833981810160405281019061003291906100e1565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b60006100ae82610091565b9050919050565b6100be816100a3565b81146100c957600080fd5b50565b6000815190506100db816100b5565b92915050565b6000602082840312156100f7576100f661006c565b5b6000610105848285016100cc565b91505092915050565b608051610b2d610129600039600061029d0152610b2d6000f3fe608060405234801561001057600080fd5b506004361061002f5760003560e01c80631536cc731461005e57610030565b5b7f5cb045dbe1e6a83a0b3b08b74d52e9d7458a678ccdbe4247774b0abb20db402f60405160405180910390a1005b6100786004803603810190610073919061065b565b61007a565b005b73378f110af67fad24a7e4311d6b33c81d5810b08973ffffffffffffffffffffffffffffffffffffffff16632529bcde8a8a8a8a6040518563ffffffff1660e01b81526004016100cd94939291906107c9565b602060405180830381865afa1580156100ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010e9190610846565b61014d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610144906108d0565b60405180910390fd5b438511610186576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101908b8b610408565b600061019a6104ae565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016101d791906108ff565b602060405180830381865afa1580156101f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610218919061092f565b90508a73ffffffffffffffffffffffffffffffffffffffff166323b872dd83888c6040518463ffffffff1660e01b81526004016102579392919061095c565b6020604051808303816000875af1158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a9190610846565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a31f6b48686866040518463ffffffff1660e01b81526004016102f8939291906109f1565b600060405180830381600087803b15801561031257600080fd5b505af1158015610326573d6000803e3d6000fd5b505050506000818b73ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161036691906108ff565b602060405180830381865afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a7919061092f565b6103b19190610a52565b9050888110156103f857806040517f8e3b9edc0000000000000000000000000000000000000000000000000000000081526004016103ef9190610a86565b60405180910390fd5b5050505050505050505050505050565b610411816104c3565b610447576040517f8e8721ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610452836104d7565b9050600061045f8261050f565b905060008382161461049d576040517f8c2e095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083821790508083555050505050565b6000601460286000303c60005160601c905090565b600060018203821615821515169050919050565b6000817f6c0dc1c455ee100500be45eb5af9d4c93f609d5877e81b7c1f2a01280732dbeb6105059190610aa1565b60001b9050919050565b600081549050919050565b600080fd5b600080fd5b6000819050919050565b61053781610524565b811461054257600080fd5b50565b6000813590506105548161052e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105858261055a565b9050919050565b60006105978261057a565b9050919050565b6105a78161058c565b81146105b257600080fd5b50565b6000813590506105c48161059e565b92915050565b6105d38161057a565b81146105de57600080fd5b50565b6000813590506105f0816105ca565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261061b5761061a6105f6565b5b8235905067ffffffffffffffff811115610638576106376105fb565b5b60208301915083600182028301111561065457610653610600565b5b9250929050565b60008060008060008060008060008060006101408c8e0312156106815761068061051a565b5b600061068f8e828f01610545565b9b505060206106a08e828f01610545565b9a505060406106b18e828f016105b5565b99505060606106c28e828f016105b5565b98505060806106d38e828f01610545565b97505060a06106e48e828f01610545565b96505060c06106f58e828f01610545565b95505060e06107068e828f016105e1565b9450506101006107188e828f016105e1565b9350506101208c013567ffffffffffffffff81111561073a5761073961051f565b5b6107468e828f01610605565b92509250509295989b509295989b9093969950565b6000819050919050565b600061078061077b6107768461055a565b61075b565b61055a565b9050919050565b600061079282610765565b9050919050565b60006107a482610787565b9050919050565b6107b481610799565b82525050565b6107c381610524565b82525050565b60006080820190506107de60008301876107ab565b6107eb60208301866107ab565b6107f860408301856107ba565b61080560608301846107ba565b95945050505050565b60008115159050919050565b6108238161080e565b811461082e57600080fd5b50565b6000815190506108408161081a565b92915050565b60006020828403121561085c5761085b61051a565b5b600061086a84828501610831565b91505092915050565b600082825260208201905092915050565b7f507269636520746f6f2068696768000000000000000000000000000000000000600082015250565b60006108ba600e83610873565b91506108c582610884565b602082019050919050565b600060208201905081810360008301526108e9816108ad565b9050919050565b6108f98161057a565b82525050565b600060208201905061091460008301846108f0565b92915050565b6000815190506109298161052e565b92915050565b6000602082840312156109455761094461051a565b5b60006109538482850161091a565b91505092915050565b600060608201905061097160008301866108f0565b61097e60208301856108f0565b61098b60408301846107ba565b949350505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006109d08385610993565b93506109dd8385846109a4565b6109e6836109b3565b840190509392505050565b6000604082019050610a0660008301866108f0565b8181036020830152610a198184866109c4565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a5d82610524565b9150610a6883610524565b925082821015610a7b57610a7a610a23565b5b828203905092915050565b6000602082019050610a9b60008301846107ba565b92915050565b6000610aac82610524565b9150610ab783610524565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610aec57610aeb610a23565b5b82820190509291505056fea2646970667358221220016b81e19e1b6ded464a23c1852b2fd6ad039075e14aafa146a76bbd021aa0d364736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002f5760003560e01c80631536cc731461005e57610030565b5b7f5cb045dbe1e6a83a0b3b08b74d52e9d7458a678ccdbe4247774b0abb20db402f60405160405180910390a1005b6100786004803603810190610073919061065b565b61007a565b005b73378f110af67fad24a7e4311d6b33c81d5810b08973ffffffffffffffffffffffffffffffffffffffff16632529bcde8a8a8a8a6040518563ffffffff1660e01b81526004016100cd94939291906107c9565b602060405180830381865afa1580156100ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010e9190610846565b61014d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610144906108d0565b60405180910390fd5b438511610186576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101908b8b610408565b600061019a6104ae565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016101d791906108ff565b602060405180830381865afa1580156101f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610218919061092f565b90508a73ffffffffffffffffffffffffffffffffffffffff166323b872dd83888c6040518463ffffffff1660e01b81526004016102579392919061095c565b6020604051808303816000875af1158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a9190610846565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a31f6b48686866040518463ffffffff1660e01b81526004016102f8939291906109f1565b600060405180830381600087803b15801561031257600080fd5b505af1158015610326573d6000803e3d6000fd5b505050506000818b73ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161036691906108ff565b602060405180830381865afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a7919061092f565b6103b19190610a52565b9050888110156103f857806040517f8e3b9edc0000000000000000000000000000000000000000000000000000000081526004016103ef9190610a86565b60405180910390fd5b5050505050505050505050505050565b610411816104c3565b610447576040517f8e8721ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610452836104d7565b9050600061045f8261050f565b905060008382161461049d576040517f8c2e095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083821790508083555050505050565b6000601460286000303c60005160601c905090565b600060018203821615821515169050919050565b6000817f6c0dc1c455ee100500be45eb5af9d4c93f609d5877e81b7c1f2a01280732dbeb6105059190610aa1565b60001b9050919050565b600081549050919050565b600080fd5b600080fd5b6000819050919050565b61053781610524565b811461054257600080fd5b50565b6000813590506105548161052e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105858261055a565b9050919050565b60006105978261057a565b9050919050565b6105a78161058c565b81146105b257600080fd5b50565b6000813590506105c48161059e565b92915050565b6105d38161057a565b81146105de57600080fd5b50565b6000813590506105f0816105ca565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261061b5761061a6105f6565b5b8235905067ffffffffffffffff811115610638576106376105fb565b5b60208301915083600182028301111561065457610653610600565b5b9250929050565b60008060008060008060008060008060006101408c8e0312156106815761068061051a565b5b600061068f8e828f01610545565b9b505060206106a08e828f01610545565b9a505060406106b18e828f016105b5565b99505060606106c28e828f016105b5565b98505060806106d38e828f01610545565b97505060a06106e48e828f01610545565b96505060c06106f58e828f01610545565b95505060e06107068e828f016105e1565b9450506101006107188e828f016105e1565b9350506101208c013567ffffffffffffffff81111561073a5761073961051f565b5b6107468e828f01610605565b92509250509295989b509295989b9093969950565b6000819050919050565b600061078061077b6107768461055a565b61075b565b61055a565b9050919050565b600061079282610765565b9050919050565b60006107a482610787565b9050919050565b6107b481610799565b82525050565b6107c381610524565b82525050565b60006080820190506107de60008301876107ab565b6107eb60208301866107ab565b6107f860408301856107ba565b61080560608301846107ba565b95945050505050565b60008115159050919050565b6108238161080e565b811461082e57600080fd5b50565b6000815190506108408161081a565b92915050565b60006020828403121561085c5761085b61051a565b5b600061086a84828501610831565b91505092915050565b600082825260208201905092915050565b7f507269636520746f6f2068696768000000000000000000000000000000000000600082015250565b60006108ba600e83610873565b91506108c582610884565b602082019050919050565b600060208201905081810360008301526108e9816108ad565b9050919050565b6108f98161057a565b82525050565b600060208201905061091460008301846108f0565b92915050565b6000815190506109298161052e565b92915050565b6000602082840312156109455761094461051a565b5b60006109538482850161091a565b91505092915050565b600060608201905061097160008301866108f0565b61097e60208301856108f0565b61098b60408301846107ba565b949350505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006109d08385610993565b93506109dd8385846109a4565b6109e6836109b3565b840190509392505050565b6000604082019050610a0660008301866108f0565b8181036020830152610a198184866109c4565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a5d82610524565b9150610a6883610524565b925082821015610a7b57610a7a610a23565b5b828203905092915050565b6000602082019050610a9b60008301846107ba565b92915050565b6000610aac82610524565b9150610ab783610524565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610aec57610aeb610a23565b5b82820190509291505056fea2646970667358221220016b81e19e1b6ded464a23c1852b2fd6ad039075e14aafa146a76bbd021aa0d364736f6c634300080e0033",
  "devdoc": {
    "errors": {
      "BitUsed()": [
        {
          "details": "Revert when bit provided is used"
        }
      ],
      "Expired()": [
        {
          "details": "Revert when limit swap is expired"
        }
      ],
      "InvalidBit()": [
        {
          "details": "Revert when bit provided is not valid"
        }
      ],
      "NotEnoughReceived(uint256)": [
        {
          "details": "Revert when swap has not received enough of the output asset to be fulfilled"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)": {
        "details": "Executes an ERC20 to ERC20 limit swap",
        "params": {
          "bit": "The value of the replay bit [signed]",
          "bitmapIndex": "The index of the replay bit's bytes32 slot [signed]",
          "data": "Data to execute on the `to` contract to fulfill the swap [unsigned]",
          "expiryBlock": "The block when the swap expires [signed]",
          "to": "Address of the contract that will fulfill the swap [unsigned]",
          "tokenIn": "The input token provided for the swap [signed]",
          "tokenInAmount": "Amount of tokenIn provided [signed]",
          "tokenOut": "The output token required to be received from the swap [signed]",
          "tokenOutAmount": "Amount of tokenOut required to be received [signed]"
        }
      }
    },
    "title": "Verifier for ERC20 limit swaps",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)": {
        "notice": "This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params"
      }
    },
    "notice": "These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}