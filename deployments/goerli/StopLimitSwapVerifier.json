{
  "address": "0xbb7Bb954336F05bb5F14232f802aC05FC5b928F0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICallExecutor",
          "name": "callExecutor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BitUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughReceived",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InvalidData",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOutAmount",
          "type": "uint256"
        }
      ],
      "name": "_isPriceValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPriceOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "testPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bitmapIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bit",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "tokenToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b3c0dfc0c1d29b54c70415eab37d04cd316bfdd5602f1ca51a18ad104919f19",
  "receipt": {
    "to": null,
    "from": "0x7A3876E516d7F221Eb4791410F7434F20f01773A",
    "contractAddress": "0xbb7Bb954336F05bb5F14232f802aC05FC5b928F0",
    "transactionIndex": 66,
    "gasUsed": "826295",
    "logsBloom": "0x
    "blockHash": "0x063bce2cd60d7e94af8fcb57164ca156f44f9c7593d5b4653075f70ea41ff9a5",
    "transactionHash": "0x0b3c0dfc0c1d29b54c70415eab37d04cd316bfdd5602f1ca51a18ad104919f19",
    "logs": [],
    "blockNumber": 7739603,
    "cumulativeGasUsed": "15292809",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDE61dfE5fbF3F4Df70B16D0618f69B96A2754bf8"
  ],
  "numDeployments": 8,
  "solcInputHash": "0af246b56daffa8a3d96afc290f54282",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICallExecutor\",\"name\":\"callExecutor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BitUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"NotEnoughReceived\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutAmount\",\"type\":\"uint256\"}],\"name\":\"_isPriceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPriceOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"testPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmapIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bit\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"BitUsed()\":[{\"details\":\"Revert when bit provided is used\"}],\"Expired()\":[{\"details\":\"Revert when limit swap is expired\"}],\"InvalidBit()\":[{\"details\":\"Revert when bit provided is not valid\"}],\"NotEnoughReceived(uint256)\":[{\"details\":\"Revert when swap has not received enough of the output asset to be fulfilled\"}]},\"kind\":\"dev\",\"methods\":{\"tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"Executes an ERC20 to ERC20 limit swap\",\"params\":{\"bit\":\"The value of the replay bit [signed]\",\"bitmapIndex\":\"The index of the replay bit's bytes32 slot [signed]\",\"data\":\"Data to execute on the `to` contract to fulfill the swap [unsigned]\",\"expiryBlock\":\"The block when the swap expires [signed]\",\"to\":\"Address of the contract that will fulfill the swap [unsigned]\",\"tokenIn\":\"The input token provided for the swap [signed]\",\"tokenInAmount\":\"Amount of tokenIn provided [signed]\",\"tokenOut\":\"The output token required to be received from the swap [signed]\",\"tokenOutAmount\":\"Amount of tokenOut required to be received [signed]\"}}},\"title\":\"Verifier for ERC20 limit swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)\":{\"notice\":\"This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params\"}},\"notice\":\"These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"StopLimitSwapVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Interfaces/ICallExecutor.sol\":{\"content\":\"\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface ICallExecutor {\\n  function proxyCall(address to, bytes memory data) external payable;\\n}\",\"keccak256\":\"0x5bb6a30e5b8fd252e45fcb09990d68d93520e3c739e8b1cb11ac7390a0deb938\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Libraries/Bit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\npragma abicoder v1;\\n\\n/// @title Bit replay protection library\\n/// @notice Handles storage and loads for replay protection bits\\n/// @dev Solution adapted from https://github.com/PISAresearch/metamask-comp/blob/77fa8295c168ee0b6bf801cbedab797d6f8cfd5d/src/contracts/BitFlipMetaTransaction/README.md\\n/// @dev This is a gas optimized technique that stores up to 256 replay protection bits per bytes32 slot\\nlibrary Bit {\\n  /// @dev Revert when bit provided is not valid\\n  error InvalidBit();\\n\\n  /// @dev Revert when bit provided is used\\n  error BitUsed();\\n\\n  /// @dev Initial pointer for bitmap storage ptr computation\\n  /// @notice This is the uint256 representation of keccak(\\\"bmp\\\")\\n  uint256 constant INITIAL_BMP_PTR = \\n  48874093989078844336340380824760280705349075126087700760297816282162649029611;\\n\\n  /// @dev Adds a bit to the uint256 bitmap at bitmapIndex\\n  /// @dev Value of bit cannot be zero and must represent a single bit\\n  /// @param bitmapIndex The index of the uint256 bitmap\\n  /// @param bit The value of the bit within the uint256 bitmap\\n  function useBit(uint256 bitmapIndex, uint256 bit) internal {\\n    if (!validBit(bit)) {\\n      revert InvalidBit();\\n    }\\n    bytes32 ptr = bitmapPtr(bitmapIndex);\\n    uint256 bitmap = loadUint(ptr);\\n    if (bitmap & bit != 0) {\\n      revert BitUsed();\\n    }\\n    uint256 updatedBitmap = bitmap | bit;\\n    assembly { sstore(ptr, updatedBitmap) }\\n  }\\n\\n  /// @dev Check that a bit is valid\\n  /// @param bit The bit to check\\n  /// @return isValid True if bit is greater than zero and represents a single bit\\n  function validBit(uint256 bit) internal pure returns (bool isValid) {\\n    assembly {\\n      // equivalent to: isValid = (bit > 0 && bit & bit-1) == 0;\\n      isValid := and(\\n        iszero(iszero(bit)), \\n        iszero(and(bit, sub(bit, 1)))\\n      )\\n    } \\n  }\\n\\n  /// @dev Get a bitmap storage pointer\\n  /// @return The bytes32 pointer to the storage location of the uint256 bitmap at bitmapIndex\\n  function bitmapPtr (uint256 bitmapIndex) internal pure returns (bytes32) {\\n    return bytes32(INITIAL_BMP_PTR + bitmapIndex);\\n  }\\n\\n  /// @dev Returns the uint256 value at storage location ptr\\n  /// @param ptr The storage location pointer\\n  /// @return val The uint256 value at storage location ptr\\n  function loadUint(bytes32 ptr) internal view returns (uint256 val) {\\n    assembly { val := sload(ptr) }\\n  }\\n}\\n\",\"keccak256\":\"0xbe67e84b69bb4a006de164048c60656592598b14e22883ce395b4f75f557aa1e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract Oracle {\\n  uint constant public ONE_HUNDRED_PERCENT = 100;\\n\\n  mapping(address => uint) public testPrices;\\n\\n  function setPriceOf(address _token, uint _price) external {\\n    testPrices[_token] = _price;\\n  }\\n\\n  function _isPriceValid(IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount) public view returns(bool){\\n    uint totalInUSD;\\n    totalInUSD += (tokenInAmount * testPrices[address(tokenIn)]);\\n    \\n    uint usdReqOut = testPrices[address(tokenOut)] * tokenOutAmount;\\n    require(totalInUSD > 0 && usdReqOut > 0, \\\"Cannot have 0\\\");\\n    return(totalInUSD <= usdReqOut);\\n  }\\n\\n}\",\"keccak256\":\"0xc137aac309fde959edfe1c4198566fcc4a0adea43856a9d503a67f46a99ef67a\",\"license\":\"MIT\"},\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./Interfaces/ICallExecutor.sol\\\";\\nimport \\\"./Libraries/Bit.sol\\\";\\nimport {Oracle} from \\\"./Oracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Verifier for ERC20 limit swaps\\n/// @notice These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts\\ncontract StopLimitSwapVerifier is Oracle{\\n  /// @dev Revert when limit swap is expired\\n  error Expired();\\n\\n  /// @dev Revert when swap has not received enough of the output asset to be fulfilled\\n  error NotEnoughReceived(uint256 amountReceived);\\n\\n  event InvalidData();\\n\\n  ICallExecutor internal immutable CALL_EXECUTOR;\\n\\n  constructor(ICallExecutor callExecutor) {\\n    CALL_EXECUTOR = callExecutor;\\n  }\\n\\n  /// @dev Executes an ERC20 to ERC20 limit swap\\n  /// @notice This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params\\n  /// @param bitmapIndex The index of the replay bit's bytes32 slot [signed]\\n  /// @param bit The value of the replay bit [signed]\\n  /// @param tokenIn The input token provided for the swap [signed]\\n  /// @param tokenOut The output token required to be received from the swap [signed]\\n  /// @param tokenInAmount Amount of tokenIn provided [signed]\\n  /// @param tokenOutAmount Amount of tokenOut required to be received [signed]\\n  /// @param expiryBlock The block when the swap expires [signed]\\n  /// @param to Address of the contract that will fulfill the swap [unsigned]\\n  /// @param data Data to execute on the `to` contract to fulfill the swap [unsigned]\\n  function tokenToToken(\\n    uint256 bitmapIndex, uint256 bit, IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount,\\n    uint256 expiryBlock, address recipient, address to, bytes calldata data\\n  )\\n    external\\n  {\\n    // Oracle Check\\n    require(_isPriceValid(tokenIn, tokenOut, tokenInAmount, tokenOutAmount), \\\"Price too high\\\");\\n\\n    if (expiryBlock <= block.number) {\\n      revert Expired();\\n    }\\n  \\n    Bit.useBit(bitmapIndex, bit);\\n\\n    address owner = proxyOwner();\\n\\n    uint256 tokenOutBalance = tokenOut.balanceOf(owner);\\n\\n    tokenIn.transferFrom(owner, recipient, tokenInAmount);\\n\\n    CALL_EXECUTOR.proxyCall(to, data);\\n\\n    uint256 tokenOutAmountReceived = tokenOut.balanceOf(owner) - tokenOutBalance;\\n\\n    // todo find out what this is all about\\n    if (tokenOutAmountReceived < tokenOutAmount) {\\n      revert NotEnoughReceived(tokenOutAmountReceived);\\n    }\\n  }\\n\\n  /// @dev Returns the owner address for the proxy\\n  /// @return _proxyOwner The owner address for the proxy\\n  function proxyOwner() internal view returns (address _proxyOwner) {\\n    assembly {\\n      // copies to \\\"scratch space\\\" 0 memory pointer\\n      extcodecopy(address(), 0, 0x28, 0x14)\\n      _proxyOwner := shr(0x60, mload(0))\\n    }\\n  }\\n\\n    fallback() external{\\n    emit InvalidData();\\n  }\\n\\n\\n}\",\"keccak256\":\"0xa6eefc3e3a732950da9e8f5c38339516a904a255334d542368fdf7346ac46aed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162000f3438038062000f348339818101604052810190620000379190620000f0565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000122565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b6000620000b88262000097565b9050919050565b620000ca81620000ab565b8114620000d657600080fd5b50565b600081519050620000ea81620000bf565b92915050565b60006020828403121562000109576200010862000072565b5b60006200011984828501620000d9565b91505092915050565b608051610df66200013e60003960006103220152610df66000f3fe608060405234801561001057600080fd5b506004361061005b5760003560e01c80630f6322c41461008a5780631536cc73146100a6578063dd0081c7146100c2578063e44b345c146100e0578063ec062b75146101105761005c565b5b7f5cb045dbe1e6a83a0b3b08b74d52e9d7458a678ccdbe4247774b0abb20db402f60405160405180910390a1005b6100a4600480360381019061009f9190610761565b610140565b005b6100c060048036038101906100bb9190610844565b610187565b005b6100ca61048d565b6040516100d79190610953565b60405180910390f35b6100fa60048036038101906100f5919061096e565b610492565b60405161010791906109f0565b60405180910390f35b61012a60048036038101906101259190610a0b565b610599565b6040516101379190610953565b60405180910390f35b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b61019389898989610492565b6101d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c990610a95565b60405180910390fd5b43851161020b576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102158b8b6105b1565b600061021f610657565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161025c9190610ac4565b602060405180830381865afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610af4565b90508a73ffffffffffffffffffffffffffffffffffffffff166323b872dd83888c6040518463ffffffff1660e01b81526004016102dc93929190610b21565b6020604051808303816000875af11580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f9190610b84565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a31f6b48686866040518463ffffffff1660e01b815260040161037d93929190610c0f565b600060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050506000818b73ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016103eb9190610ac4565b602060405180830381865afa158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c9190610af4565b6104369190610c70565b90508881101561047d57806040517f8e3b9edc0000000000000000000000000000000000000000000000000000000081526004016104749190610953565b60405180910390fd5b5050505050505050505050505050565b606481565b6000806000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846104df9190610ca4565b816104ea9190610cfe565b90506000836000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105389190610ca4565b905060008211801561054a5750600081115b610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058090610da0565b60405180910390fd5b8082111592505050949350505050565b60006020528060005260406000206000915090505481565b6105ba8161066c565b6105f0576040517f8e8721ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105fb83610680565b90506000610608826106b8565b9050600083821614610646576040517f8c2e095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083821790508083555050505050565b6000601460286000303c60005160601c905090565b600060018203821615821515169050919050565b6000817f6c0dc1c455ee100500be45eb5af9d4c93f609d5877e81b7c1f2a01280732dbeb6106ae9190610cfe565b60001b9050919050565b600081549050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106f8826106cd565b9050919050565b610708816106ed565b811461071357600080fd5b50565b600081359050610725816106ff565b92915050565b6000819050919050565b61073e8161072b565b811461074957600080fd5b50565b60008135905061075b81610735565b92915050565b60008060408385031215610778576107776106c3565b5b600061078685828601610716565b92505060206107978582860161074c565b9150509250929050565b60006107ac826106ed565b9050919050565b6107bc816107a1565b81146107c757600080fd5b50565b6000813590506107d9816107b3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610804576108036107df565b5b8235905067ffffffffffffffff811115610821576108206107e4565b5b60208301915083600182028301111561083d5761083c6107e9565b5b9250929050565b60008060008060008060008060008060006101408c8e03121561086a576108696106c3565b5b60006108788e828f0161074c565b9b505060206108898e828f0161074c565b9a5050604061089a8e828f016107ca565b99505060606108ab8e828f016107ca565b98505060806108bc8e828f0161074c565b97505060a06108cd8e828f0161074c565b96505060c06108de8e828f0161074c565b95505060e06108ef8e828f01610716565b9450506101006109018e828f01610716565b9350506101208c013567ffffffffffffffff811115610923576109226106c8565b5b61092f8e828f016107ee565b92509250509295989b509295989b9093969950565b61094d8161072b565b82525050565b60006020820190506109686000830184610944565b92915050565b60008060008060808587031215610988576109876106c3565b5b6000610996878288016107ca565b94505060206109a7878288016107ca565b93505060406109b88782880161074c565b92505060606109c98782880161074c565b91505092959194509250565b60008115159050919050565b6109ea816109d5565b82525050565b6000602082019050610a0560008301846109e1565b92915050565b600060208284031215610a2157610a206106c3565b5b6000610a2f84828501610716565b91505092915050565b600082825260208201905092915050565b7f507269636520746f6f2068696768000000000000000000000000000000000000600082015250565b6000610a7f600e83610a38565b9150610a8a82610a49565b602082019050919050565b60006020820190508181036000830152610aae81610a72565b9050919050565b610abe816106ed565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b600081519050610aee81610735565b92915050565b600060208284031215610b0a57610b096106c3565b5b6000610b1884828501610adf565b91505092915050565b6000606082019050610b366000830186610ab5565b610b436020830185610ab5565b610b506040830184610944565b949350505050565b610b61816109d5565b8114610b6c57600080fd5b50565b600081519050610b7e81610b58565b92915050565b600060208284031215610b9a57610b996106c3565b5b6000610ba884828501610b6f565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610bee8385610bb1565b9350610bfb838584610bc2565b610c0483610bd1565b840190509392505050565b6000604082019050610c246000830186610ab5565b8181036020830152610c37818486610be2565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7b8261072b565b9150610c868361072b565b925082821015610c9957610c98610c41565b5b828203905092915050565b6000610caf8261072b565b9150610cba8361072b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610cf357610cf2610c41565b5b828202905092915050565b6000610d098261072b565b9150610d148361072b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4957610d48610c41565b5b828201905092915050565b7f43616e6e6f742068617665203000000000000000000000000000000000000000600082015250565b6000610d8a600d83610a38565b9150610d9582610d54565b602082019050919050565b60006020820190508181036000830152610db981610d7d565b905091905056fea264697066735822122035dd5f799daaf0c6f58f072086a698f05373000cbb1ac28a0014ed8c1ff65f9b64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061005b5760003560e01c80630f6322c41461008a5780631536cc73146100a6578063dd0081c7146100c2578063e44b345c146100e0578063ec062b75146101105761005c565b5b7f5cb045dbe1e6a83a0b3b08b74d52e9d7458a678ccdbe4247774b0abb20db402f60405160405180910390a1005b6100a4600480360381019061009f9190610761565b610140565b005b6100c060048036038101906100bb9190610844565b610187565b005b6100ca61048d565b6040516100d79190610953565b60405180910390f35b6100fa60048036038101906100f5919061096e565b610492565b60405161010791906109f0565b60405180910390f35b61012a60048036038101906101259190610a0b565b610599565b6040516101379190610953565b60405180910390f35b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b61019389898989610492565b6101d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c990610a95565b60405180910390fd5b43851161020b576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102158b8b6105b1565b600061021f610657565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161025c9190610ac4565b602060405180830381865afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610af4565b90508a73ffffffffffffffffffffffffffffffffffffffff166323b872dd83888c6040518463ffffffff1660e01b81526004016102dc93929190610b21565b6020604051808303816000875af11580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f9190610b84565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a31f6b48686866040518463ffffffff1660e01b815260040161037d93929190610c0f565b600060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050506000818b73ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016103eb9190610ac4565b602060405180830381865afa158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c9190610af4565b6104369190610c70565b90508881101561047d57806040517f8e3b9edc0000000000000000000000000000000000000000000000000000000081526004016104749190610953565b60405180910390fd5b5050505050505050505050505050565b606481565b6000806000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846104df9190610ca4565b816104ea9190610cfe565b90506000836000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105389190610ca4565b905060008211801561054a5750600081115b610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058090610da0565b60405180910390fd5b8082111592505050949350505050565b60006020528060005260406000206000915090505481565b6105ba8161066c565b6105f0576040517f8e8721ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105fb83610680565b90506000610608826106b8565b9050600083821614610646576040517f8c2e095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083821790508083555050505050565b6000601460286000303c60005160601c905090565b600060018203821615821515169050919050565b6000817f6c0dc1c455ee100500be45eb5af9d4c93f609d5877e81b7c1f2a01280732dbeb6106ae9190610cfe565b60001b9050919050565b600081549050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106f8826106cd565b9050919050565b610708816106ed565b811461071357600080fd5b50565b600081359050610725816106ff565b92915050565b6000819050919050565b61073e8161072b565b811461074957600080fd5b50565b60008135905061075b81610735565b92915050565b60008060408385031215610778576107776106c3565b5b600061078685828601610716565b92505060206107978582860161074c565b9150509250929050565b60006107ac826106ed565b9050919050565b6107bc816107a1565b81146107c757600080fd5b50565b6000813590506107d9816107b3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610804576108036107df565b5b8235905067ffffffffffffffff811115610821576108206107e4565b5b60208301915083600182028301111561083d5761083c6107e9565b5b9250929050565b60008060008060008060008060008060006101408c8e03121561086a576108696106c3565b5b60006108788e828f0161074c565b9b505060206108898e828f0161074c565b9a5050604061089a8e828f016107ca565b99505060606108ab8e828f016107ca565b98505060806108bc8e828f0161074c565b97505060a06108cd8e828f0161074c565b96505060c06108de8e828f0161074c565b95505060e06108ef8e828f01610716565b9450506101006109018e828f01610716565b9350506101208c013567ffffffffffffffff811115610923576109226106c8565b5b61092f8e828f016107ee565b92509250509295989b509295989b9093969950565b61094d8161072b565b82525050565b60006020820190506109686000830184610944565b92915050565b60008060008060808587031215610988576109876106c3565b5b6000610996878288016107ca565b94505060206109a7878288016107ca565b93505060406109b88782880161074c565b92505060606109c98782880161074c565b91505092959194509250565b60008115159050919050565b6109ea816109d5565b82525050565b6000602082019050610a0560008301846109e1565b92915050565b600060208284031215610a2157610a206106c3565b5b6000610a2f84828501610716565b91505092915050565b600082825260208201905092915050565b7f507269636520746f6f2068696768000000000000000000000000000000000000600082015250565b6000610a7f600e83610a38565b9150610a8a82610a49565b602082019050919050565b60006020820190508181036000830152610aae81610a72565b9050919050565b610abe816106ed565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b600081519050610aee81610735565b92915050565b600060208284031215610b0a57610b096106c3565b5b6000610b1884828501610adf565b91505092915050565b6000606082019050610b366000830186610ab5565b610b436020830185610ab5565b610b506040830184610944565b949350505050565b610b61816109d5565b8114610b6c57600080fd5b50565b600081519050610b7e81610b58565b92915050565b600060208284031215610b9a57610b996106c3565b5b6000610ba884828501610b6f565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610bee8385610bb1565b9350610bfb838584610bc2565b610c0483610bd1565b840190509392505050565b6000604082019050610c246000830186610ab5565b8181036020830152610c37818486610be2565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7b8261072b565b9150610c868361072b565b925082821015610c9957610c98610c41565b5b828203905092915050565b6000610caf8261072b565b9150610cba8361072b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610cf357610cf2610c41565b5b828202905092915050565b6000610d098261072b565b9150610d148361072b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4957610d48610c41565b5b828201905092915050565b7f43616e6e6f742068617665203000000000000000000000000000000000000000600082015250565b6000610d8a600d83610a38565b9150610d9582610d54565b602082019050919050565b60006020820190508181036000830152610db981610d7d565b905091905056fea264697066735822122035dd5f799daaf0c6f58f072086a698f05373000cbb1ac28a0014ed8c1ff65f9b64736f6c634300080e0033",
  "devdoc": {
    "errors": {
      "BitUsed()": [
        {
          "details": "Revert when bit provided is used"
        }
      ],
      "Expired()": [
        {
          "details": "Revert when limit swap is expired"
        }
      ],
      "InvalidBit()": [
        {
          "details": "Revert when bit provided is not valid"
        }
      ],
      "NotEnoughReceived(uint256)": [
        {
          "details": "Revert when swap has not received enough of the output asset to be fulfilled"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)": {
        "details": "Executes an ERC20 to ERC20 limit swap",
        "params": {
          "bit": "The value of the replay bit [signed]",
          "bitmapIndex": "The index of the replay bit's bytes32 slot [signed]",
          "data": "Data to execute on the `to` contract to fulfill the swap [unsigned]",
          "expiryBlock": "The block when the swap expires [signed]",
          "to": "Address of the contract that will fulfill the swap [unsigned]",
          "tokenIn": "The input token provided for the swap [signed]",
          "tokenInAmount": "Amount of tokenIn provided [signed]",
          "tokenOut": "The output token required to be received from the swap [signed]",
          "tokenOutAmount": "Amount of tokenOut required to be received [signed]"
        }
      }
    },
    "title": "Verifier for ERC20 limit swaps",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)": {
        "notice": "This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params"
      }
    },
    "notice": "These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 194,
        "contract": "contracts/Verifier.sol:StopLimitSwapVerifier",
        "label": "testPrices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}