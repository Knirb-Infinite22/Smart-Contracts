{
  "language": "Solidity",
  "sources": {
    "contracts/CallExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma abicoder v1;\n\n/**\n * @dev Used as a proxy for call execution to obscure msg.sender of the\n * caller. msg.sender will be the address of the CallExecutor contract.\n *\n * Instances of Proxy (user account contracts) use CallExecutor to execute\n * unsigned data calls without exposing themselves as msg.sender. Users can\n * sign messages that allow public unsigned data execution via CallExecutor\n * without allowing public calls to be executed directly from their Proxy\n * contract.\n *\n * This is implemented specifically for swap calls that allow unsigned data\n * execution. If unsigned data was executed directly from the Proxy contract,\n * an attacker could make a call that satisfies the swap required conditions\n * but also makes other malicious calls that rely on msg.sender. Forcing all\n * unsigned data execution to be done through a CallExecutor ensures that an\n * attacker cannot impersonate the users's account.\n *\n */\ncontract CallExecutor {\n  /**\n   * @dev A payable function that executes a call with `data` on the\n   * contract address `to`\n   *\n   * Sets value for the call to `callvalue`, the amount of Eth provided with\n   * the call\n   */\n  function proxyCall(address to, bytes memory data) external payable {\n    // execute `data` on execution contract address `to`\n    assembly {\n      let result := call(gas(), to, callvalue(), add(data, 0x20), mload(data), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      switch result\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n}\n"
    },
    "contracts/Implementation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\ncontract Implementation{\n    IUniswapV2Router02 constant public uni = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    \n    event InvalidData();\n\n    function tokensToToken(address maker, IERC20[] calldata tokensIn, IERC20 tokenOut, uint256[] calldata tokensInAmount, uint256 tokenOutAmount)external{\n    require(tokensIn.length == tokensInAmount.length, \"Arrays must have the same length\");\n    for(uint i = 0; i < tokensIn.length; i++){\n        require(tokensIn[i].balanceOf(address(this)) >= tokensInAmount[i], \"Tokens not received\");\n\n        tokensIn[i].approve(address(uni), tokensInAmount[i]);\n        address[] memory path = new address[](2);\n        path[0] = address(tokensIn[i]);\n        path[1] = address(tokenOut);\n        uni.swapExactTokensForTokens(tokensInAmount[i], tokenOutAmount, path, address(this), block.timestamp + 30);\n    }\n\n    tokenOut.transfer(maker, tokenOutAmount);\n\n  }\n\n  fallback() external{\n    revert(\"Invalid call to implementation\");\n  }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport \"./Interfaces/ICallExecutor.sol\";\nimport \"./Libraries/Bit.sol\";\nimport {Oracle} from \"./Oracle.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Verifier for ERC20 limit swaps\n/// @notice These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts\ncontract StopLimitSwapVerifier is Oracle{\n  /// @dev Revert when limit swap is expired\n  error Expired();\n\n  /// @dev Revert when swap has not received enough of the output asset to be fulfilled\n  error NotEnoughReceived(uint256 amountReceived);\n\n  event InvalidData();\n\n  ICallExecutor internal immutable CALL_EXECUTOR;\n\n  constructor(ICallExecutor callExecutor) {\n    CALL_EXECUTOR = callExecutor;\n  }\n\n  /// @dev Executes an ERC20 to ERC20 limit swap\n  /// @notice This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params\n  /// @param bitmapIndex The index of the replay bit's bytes32 slot [signed]\n  /// @param bit The value of the replay bit [signed]\n  /// @param tokenIn The input token provided for the swap [signed]\n  /// @param tokenOut The output token required to be received from the swap [signed]\n  /// @param tokenInAmount Amount of tokenIn provided [signed]\n  /// @param tokenOutAmount Amount of tokenOut required to be received [signed]\n  /// @param expiryBlock The block when the swap expires [signed]\n  /// @param to Address of the contract that will fulfill the swap [unsigned]\n  /// @param data Data to execute on the `to` contract to fulfill the swap [unsigned]\n  function tokenToToken(\n    uint256 bitmapIndex, uint256 bit, IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount,\n    uint256 expiryBlock, address recipient, address to, bytes calldata data\n  )\n    external\n  {\n    // Oracle Check\n    require(_isPriceValid(tokenIn, tokenOut, tokenInAmount, tokenOutAmount), \"Price too high\");\n\n    if (expiryBlock <= block.number) {\n      revert Expired();\n    }\n  \n    Bit.useBit(bitmapIndex, bit);\n\n    address owner = proxyOwner();\n\n    uint256 tokenOutBalance = tokenOut.balanceOf(owner);\n\n    tokenIn.transferFrom(owner, recipient, tokenInAmount);\n\n    CALL_EXECUTOR.proxyCall(to, data);\n\n    uint256 tokenOutAmountReceived = tokenOut.balanceOf(owner) - tokenOutBalance;\n\n    // todo find out what this is all about\n    if (tokenOutAmountReceived < tokenOutAmount) {\n      revert NotEnoughReceived(tokenOutAmountReceived);\n    }\n  }\n\n  /// @dev Returns the owner address for the proxy\n  /// @return _proxyOwner The owner address for the proxy\n  function proxyOwner() internal view returns (address _proxyOwner) {\n    assembly {\n      // copies to \"scratch space\" 0 memory pointer\n      extcodecopy(address(), 0, 0x28, 0x14)\n      _proxyOwner := shr(0x60, mload(0))\n    }\n  }\n\n    fallback() external{\n    emit InvalidData();\n  }\n\n\n}"
    },
    "contracts/Interfaces/ICallExecutor.sol": {
      "content": "\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.10;\n\ninterface ICallExecutor {\n  function proxyCall(address to, bytes memory data) external payable;\n}"
    },
    "contracts/Libraries/Bit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.10;\npragma abicoder v1;\n\n/// @title Bit replay protection library\n/// @notice Handles storage and loads for replay protection bits\n/// @dev Solution adapted from https://github.com/PISAresearch/metamask-comp/blob/77fa8295c168ee0b6bf801cbedab797d6f8cfd5d/src/contracts/BitFlipMetaTransaction/README.md\n/// @dev This is a gas optimized technique that stores up to 256 replay protection bits per bytes32 slot\nlibrary Bit {\n  /// @dev Revert when bit provided is not valid\n  error InvalidBit();\n\n  /// @dev Revert when bit provided is used\n  error BitUsed();\n\n  /// @dev Initial pointer for bitmap storage ptr computation\n  /// @notice This is the uint256 representation of keccak(\"bmp\")\n  uint256 constant INITIAL_BMP_PTR = \n  48874093989078844336340380824760280705349075126087700760297816282162649029611;\n\n  /// @dev Adds a bit to the uint256 bitmap at bitmapIndex\n  /// @dev Value of bit cannot be zero and must represent a single bit\n  /// @param bitmapIndex The index of the uint256 bitmap\n  /// @param bit The value of the bit within the uint256 bitmap\n  function useBit(uint256 bitmapIndex, uint256 bit) internal {\n    if (!validBit(bit)) {\n      revert InvalidBit();\n    }\n    bytes32 ptr = bitmapPtr(bitmapIndex);\n    uint256 bitmap = loadUint(ptr);\n    if (bitmap & bit != 0) {\n      revert BitUsed();\n    }\n    uint256 updatedBitmap = bitmap | bit;\n    assembly { sstore(ptr, updatedBitmap) }\n  }\n\n  /// @dev Check that a bit is valid\n  /// @param bit The bit to check\n  /// @return isValid True if bit is greater than zero and represents a single bit\n  function validBit(uint256 bit) internal pure returns (bool isValid) {\n    assembly {\n      // equivalent to: isValid = (bit > 0 && bit & bit-1) == 0;\n      isValid := and(\n        iszero(iszero(bit)), \n        iszero(and(bit, sub(bit, 1)))\n      )\n    } \n  }\n\n  /// @dev Get a bitmap storage pointer\n  /// @return The bytes32 pointer to the storage location of the uint256 bitmap at bitmapIndex\n  function bitmapPtr (uint256 bitmapIndex) internal pure returns (bytes32) {\n    return bytes32(INITIAL_BMP_PTR + bitmapIndex);\n  }\n\n  /// @dev Returns the uint256 value at storage location ptr\n  /// @param ptr The storage location pointer\n  /// @return val The uint256 value at storage location ptr\n  function loadUint(bytes32 ptr) internal view returns (uint256 val) {\n    assembly { val := sload(ptr) }\n  }\n}\n"
    },
    "contracts/Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract Oracle {\n  uint constant public ONE_HUNDRED_PERCENT = 100;\n\n  mapping(address => uint) public testPrices;\n\n  function setPriceOf(address _token, uint _price) external {\n    testPrices[_token] = _price;\n  }\n\n  function _isPriceValid(IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount) internal returns(bool){\n    uint totalInUSD;\n    totalInUSD += (tokenInAmount * _getChainlinkPriceOf(tokenIn));\n\n    uint usdReqOut = _getChainlinkPriceOf(tokenOut) * tokenOutAmount;\n\n    return(totalInUSD >= usdReqOut);\n  }\n\n  function _getChainlinkPriceOf(IERC20 _token) internal returns(uint){\n    return testPrices[address(_token)];\n  }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}